{"version":3,"sources":["logo.svg","Algorithms.js","SortingWiz.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","mergeSortAlgo","array","animations","length","auxArray","slice","helperMergeSort","start","end","mid","Math","floor","i","j","l","push","merge","SortingWiz","props","state","running","speed","algo","handleChange","bind","this","newArray","initialSpeed","evt","parseInt","target","value","element","ReactDOM","render","document","getElementById","element2","key","insertionSortAlgo","time","arrayBars","getElementsByClassName","barOne","barTwo","indx","setTimeout","style","backgroundColor","barOneStyle","height","arr","temp","bubbleSortAlgo","barTwoStyle","barOneindx","newHeight","setState","min","selectionSortAlgo","val","randomNum","random","console","log","selectionSort","mergeSort","insertionSort","bubbleSort","window","location","reload","numWidth","innerWidth","width","numMargin","margin","className","class","href","type","id","max","onChange","onClick","selectionSortChoose","mergeSortChoose","bubbleSortChoose","insertionSortChoose","abort","map","idx","marginLeft","marginRight","color","React","Component","App","Boolean","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a55e18ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport SortingWiz from './SortingWiz.jsx';\n\nexport function mergeSortAlgo(array){\n    const animations = [];\n    if(array.length<=1){\n        return array;\n    }\n    const auxArray = array.slice();\n    helperMergeSort(array,0,array.length-1,auxArray,animations);\n    \n    return animations;\n}\n\nfunction helperMergeSort(array, start, end, auxArray,animations){\n    if(start===end){\n        return;\n    }\n    const mid = Math.floor((start+end)/2);\n    helperMergeSort(auxArray,start,mid,array,animations);\n    helperMergeSort(auxArray,mid+1,end, array,animations);\n    merge(array,start,mid,end,auxArray,animations);\n}\n\nfunction merge(array,start,mid,end,auxArray,animations){\n    let i = start;\n    let j = mid+1;\n    let k = end;\n    let l = start;\n    while(i<=mid&&j<=end){\n        animations.push([i,j]);\n        animations.push([i,j]);\n        if(auxArray[i]<auxArray[j]){\n            animations.push([l,auxArray[i]]);\n            array[l] = auxArray[i];\n            l++;\n            i++;\n        }\n        else{\n            animations.push([l,auxArray[j]]);\n            array[l] = auxArray[j];\n            l++;\n            j++;\n        }\n    }\n    while(i<=mid){\n        animations.push([i,i]);\n        animations.push([i,i]);\n        animations.push([l,auxArray[i]]);\n        array[l]=auxArray[i];\n        l++;\n        i++;\n    }\n    while(j<=end){\n        animations.push([j,j]);\n        animations.push([j,j]);\n        animations.push([l,auxArray[j]]);\n        array[l]=auxArray[j];\n        l++;\n        j++;\n    }\n}\n\nexport function bubbleSortAlgo(arr){\n    const animations = [];\n    for(let i = 0; i < arr.length-1;i++){\n        for(let j = 0; j<arr.length-1-i;j++){\n            animations.push([j,j+1]);\n            animations.push([j,j+1]);\n            if(arr[j]>arr[j+1]){\n                let temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n                animations.push([j,arr[j]]);\n                animations.push([j+1,arr[j+1]]);\n            }\n            else{\n                animations.push([j,arr[j]]);\n                animations.push([j+1,arr[j+1]]);\n            }\n        }\n    }\n    return animations;\n}\n\nexport function insertionSortAlgo(array){\n    const animations = [];\n    for(let i =1; i< array.length; i++){\n        animations.push([i,i,0]);\n        animations.push([i,i,-1]);\n        let key = array[i];\n        let j = i-1;\n        \n        //we are shifting all values that are larger thn\n        //our current key up \n        while(j>=0&&array[j]>key){\n            animations.push([j,j,0]);\n            animations.push([j,j,-1]);\n            animations.push([j+1,array[j],-2]);\n            array[j+1] = array[j];\n            j--;\n        }\n        //placing key on the right spot\n        animations.push([j+1,key,-2]);\n        array[j+1] = key;\n        \n    }\n    return animations;\n}\n\n\nexport function selectionSortAlgo(array){\n    const animations = [];\n    for(let i = 0; i< array.length; i++){\n        let min = i;\n        for(let j = i+1; j<array.length;j++){\n            if(array[j]<array[min]){\n                min = j;\n            }\n        }\n        animations.push([i,min]);\n        animations.push([i,min]);\n        animations.push([i,array[min]]);\n        animations.push([min,array[i]]);\n        let temp = array[min];\n        array[min] = array[i];\n        array[i] = temp;\n    }\n    return animations;\n}","import React from 'react';\nimport './barsStyle.css';\nimport ReactDOM from 'react-dom';\nimport {mergeSortAlgo} from './Algorithms.js';\nimport {bubbleSortAlgo} from './Algorithms.js';\nimport {insertionSortAlgo} from './Algorithms.js';\nimport {selectionSortAlgo} from './Algorithms.js';\n\n\nclass SortingWiz extends React.Component{\n    //creating constructor\n    constructor(props){\n        super(props);\n        //initializing local state\n        this.state = {array:[] , running: false, speed: 20, algo: 0};\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        this.newArray(100);\n\n        this.initialSpeed();\n        // this.initialName();\n        \n\n    }\n\n    handleChange(evt) {\n        const { newArray } = this.props;\n        \n        this.newArray(Math.floor((parseInt(evt.target.value) + 3) * 1.65));\n        let array = this.state.array;\n        \n      }\n\n    insertionSort(array){\n        \n        const element = <div>Insertion Sort</div>;\n        ReactDOM.render(element, document.getElementById('Algo-name'));\n        const element2 = <div>Insertion Sort is a simple sorting algorithm that builds the final sorted list by transferring one element at a time.</div>;\n        ReactDOM.render(element2, document.getElementById('text'));\n        const copy = this.state.array.slice();\n        const animations = insertionSortAlgo(copy);\n        const time = <div>\n            <div>Worst-case time complexity:     O(n^2) </div>     \n            <div>Average time complexity:\t    O(n^2) </div>     \n            <div>Best-case time complexity:\t    O(n)  </div>    \n            </div>;\n        ReactDOM.render(time, document.getElementById('time'));\n        for(let i = 0; i<animations.length; i++){\n            let arrayBars = document.getElementsByClassName('array-bars');    \n            const[barOne,barTwo, indx] = animations[i];\n            //if animation is showing value before it's being replaced\n            if(indx===0){\n                setTimeout(()=>{\n                    const barOneStyle = arrayBars[barOne].style;\n                    barOneStyle.backgroundColor = '#ff8c00';\n                },i*this.state.speed);\n            }\n            else if(indx===-1){\n                setTimeout(()=>{\n                    const barOneStyle = arrayBars[barOne].style;\n                    barOneStyle.backgroundColor = '#b34cf4';\n                },i*this.state.speed);\n            }\n            else{\n                setTimeout(()=>{\n                    const barOneIdx = arrayBars[barOne];\n                    const barOneStyle = arrayBars[barOne].style;\n                    barOneStyle.height = `${barTwo}px`;\n                    arrayBars[barOne].value= 0;\n                    barOneStyle.backgroundColor = '#b34cf4';\n                },i*this.state.speed);\n                \n\n            }\n        }\n    }\n \n    bubbleSort(array){\n        const element = <div>Bubble Sort</div>;\n        ReactDOM.render(element, document.getElementById('Algo-name'));\n        const element2 = <div>Bubble Sort is a simple sorting algorithm that repeatedly goes through the list, compares two adjacent elements and swaps them if they are in the wrong order.This process repeats until the list is sorted.  The algorithm is simple, however it is too slow and very inefficient for most problems.</div>;\n        ReactDOM.render(element2, document.getElementById('text'));\n        const copy = this.state.array.slice();\n        const animations = bubbleSortAlgo(copy);\n        const time = <div>\n            <div>Worst-case time complexity:     O(n^2) </div>     \n            <div>Average time complexity:\t    O(n^2) </div>     \n            <div>Best-case time complexity:\t    O(n)  </div>    \n            </div>;\n        ReactDOM.render(time, document.getElementById('time'));\n        for(let i = 0; i<animations.length;i++){\n            const arrayBars = document.getElementsByClassName('array-bars');\n            if(i%4===0){\n                \n                setTimeout(()=>{\n                    const [barOne,barTwo] = animations[i];\n                    const barOneStyle = arrayBars[barOne].style;\n                    const barTwoStyle = arrayBars[barTwo].style;\n                    barOneStyle.backgroundColor = '#ff8c00';\n                    barTwoStyle.backgroundColor = '#ff8c00';\n                },i*this.state.speed);\n            }\n            else if(i%4===1){\n                \n                setTimeout(()=>{\n                    const[barOne, barTwo] = animations[i];\n                    const barOneStyle = arrayBars[barOne].style;\n                    const barTwoStyle = arrayBars[barTwo].style;\n                    barOneStyle.backgroundColor = '#b34cf4';\n                    barTwoStyle.backgroundColor = '#b34cf4';\n                    \n                },i*this.state.speed);\n            }\n            else{\n                \n                setTimeout(()=>{\n                    const[barOne, height] = animations[i];\n                    const barOneStyle = arrayBars[barOne].style;\n                    barOneStyle.height = `${height}px`;\n                    barOneStyle.backgroundColor = '#b34cf4';\n                },i*this.state.speed);\n            }\n        }\n \n    }\n\n    mergeSort(array){\n       \n        const element = <div>Merge Sort</div>;\n        ReactDOM.render(element, document.getElementById('Algo-name'));\n        const element2 = <div>Merge Sort is a Divide and Conquer algorithm. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves.Merge sort is an efficient and stable sorting algorithm.</div>;\n        ReactDOM.render(element2, document.getElementById('text'));\n        const time = <div>\n            <div>Worst-case time complexity:     O(n log n) </div>     \n            <div>Average time complexity:\t    O(n log n) </div>     \n            <div>Best-case time complexity:\t    O(n log n)  </div>    \n            </div>;\n        ReactDOM.render(time, document.getElementById('time'));\n        const arr = this.state.array.slice();\n        const animations = mergeSortAlgo(arr);\n        for(let i = 0; i <animations.length;i++){\n            const arrayBars = document.getElementsByClassName('array-bars');\n            //considering animations that happen before the values were \"swaped\"\n            if(i%3!==2){\n                const [barOne, barTwo] = animations[i];\n                //if annimation is the one after the values were swapped \n                const barOneStyle = arrayBars[barOne].style;\n                //console.log(arrayBars[barTwo]);\n                const barTwoStyle = arrayBars[barTwo].style;\n                \n                if(i%3===0){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = '#ff8c00';\n                        barTwoStyle.backgroundColor = '#ff8c00';\n                      }, i * this.state.speed);\n                }\n                else{\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = '#b34cf4';\n                        barTwoStyle.backgroundColor = '#b34cf4';\n                      }, i * this.state.speed); \n                }\n            }\n            else{\n                setTimeout(() => {\n                    const [barOneindx, newHeight] = animations[i];\n                    //const barOneStyle = arrayBars[barOneIdx].style;\n                    const barOneStyle = arrayBars[barOneindx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                    //barOneStyle.height = `${newHeight}px`;\n                  }, i * this.state.speed);\n            }\n        }\n    }\n    selectionSortChoose(){\n        const algo = 1;\n        this.setState({algo});\n    }\n    mergeSortChoose(){\n        const algo = 2;\n        this.setState({algo});\n    }\n    insertionSortChoose(){\n        const algo = 3;\n        this.setState({algo});\n    }\n    bubbleSortChoose(){\n        const algo = 4;\n        this.setState({algo});\n    }\n    selectionSort(array){\n        const copy = this.state.array.slice();\n        const animations = selectionSortAlgo(copy);\n        const element = <div>Selection Sort</div>;\n        ReactDOM.render(element, document.getElementById('Algo-name'));\n        const element2 = <div>Selection Sort is a simple sorting in-place comparison-based algorithm. The list is divided into two parts, the sorted part at the left end and the unsorted part at the right end. Initially, the sorted part is empty and the unsorted part is the entire list. The smallest element is selected from the unsorted array and swapped with the leftmost element, and that element becomes a part of the sorted array. This process continues moving unsorted array boundary by one element to the right. </div>;\n        ReactDOM.render(element2, document.getElementById('text'));\n        const time = <div>\n            <div>Worst-case time complexity:     O(n^2) </div>     \n            <div>Average time complexity:\t    O(n^2) </div>     \n            <div>Best-case time complexity:\t    O(n^2)  </div>    \n            </div>;\n        ReactDOM.render(time, document.getElementById('time'));\n       \n        for(let i = 0; i <animations.length;i++){\n            \n            const arrayBars = document.getElementsByClassName('array-bars');\n            \n            if(i%4===0){\n                setTimeout(()=>{\n                    const[barOne,barTwo] = animations[i];\n                    const barOneStyle = arrayBars[barOne].style;\n                    const barTwoStyle = arrayBars[barTwo].style;\n                    barOneStyle.backgroundColor = '#ff8c00';\n                    barTwoStyle.backgroundColor = '#ff8c00';\n                },i*this.state.speed);\n\n            }\n            else if(i%4===1){\n                setTimeout(()=>{\n                    const[barOne,barTwo] = animations[i];\n                    const barOneStyle = arrayBars[barOne].style;\n                    const barTwoStyle = arrayBars[barTwo].style;\n                    barOneStyle.backgroundColor = '#b34cf4';\n                    barTwoStyle.backgroundColor = '#b34cf4';\n                },i*this.state.speed);\n            }\n            else{\n                const[barOne,height] = animations[i];\n                    const barOneStyle = arrayBars[barOne].style;\n                setTimeout(()=>{\n                    barOneStyle.backgroundColor = '#ff8c00';\n                    barOneStyle.height = `${height}px`;\n                },i*this.state.speed);\n                setTimeout(()=>{\n                    barOneStyle.backgroundColor = '#b34cf4';\n                },i*this.state.speed);\n            }\n        }\n        \n\n    }\n    newArray(val){\n        const array = [];\n        for(let i = 0; i<val;i++){\n            var randomNum = Math.floor((Math.random()*((600-10)+1))+10);\n            array.push(randomNum);\n        }\n        this.setState({array});\n        const speed = this.state.array.length <10 ?\n        500 : this.state.array.length <20 ? \n        400 : this.state.array.length <30 ?\n        300 : this.state.array.length <40 ?\n        200 : this.state.array.length <40 ?\n        150 : this.state.array.length <60 ?\n        100 : this.state.array.length <80 ?\n        50 : this.state.array.length <100 ?\n        20 : 10;\n      this.setState({speed});\n      console.log(this.state.speed);\n    }\n    start(){\n        if(this.state.algo===1){\n            this.selectionSort();\n        }\n        if(this.state.algo===2){\n            this.mergeSort();\n        }\n        if(this.state.algo===3){\n            this.insertionSort();\n        }\n        if(this.state.algo===4){\n            this.bubbleSort();\n        }\n    }\n    initialSpeed(){\n        const speed = 20;\n        this.setState({speed});\n    }\n    abort(){\n        window.location.reload(false);\n    }\n\n    render(){\n        const{array} = this.state;\n        const{algo} = this.state;\n        \n              const numWidth = Math.floor(window.innerWidth / (array.length * 3));\n        const color =  \"transparent\";\n        const width = `${numWidth}px`;\n        const numMargin = array.length < 5 ?\n            10 : array.length < 8 ?\n                8 : array.length < 11 ?\n                6 : array.length < 20 ?\n                    4 : array.length < 50 ?\n                    3.5 : array.length < 100 ?\n                        3 : array.length < 130 ?\n                        2.5 : 2;\n  \n    const margin = `${numMargin}px`;\n        return (\n            <div className=\"body\" >\n                <style>{'body { background-color: #374750; }'}</style>\n            <div className = \"app-name\">Sorting Algorithms Visualizer created with <span class=\"heart\"></span> and coffee by <a className = \"linkedin\" href  =\"https://www.linkedin.com/in/dariabazueva/\">Daria Bazueva</a></div>\n            \n            <div className = \"menu\"> \n            <input \n            className = \"slide\"\n            type=\"range\"\n            id = \"slide\"\n            min = \"0\"\n            max = \"50\"\n            onChange = {this.handleChange}\n            ></input>\n            <button className = \"generate\" onClick={() => this.newArray(100)}> Generate New Array </button>\n                    <button className = \"selectionSort\" onClick = {()=>this.selectionSortChoose()}>Selection Sort</button>\n                    <button className=\"mergeSort\" onClick={() => this.mergeSortChoose()}> Merge Sort</button>\n                    <button className = \"bubbleSort\" onClick = {()=>this.bubbleSortChoose()}>Bubble Sort</button>\n                    <button className = \"insertionSort\" onClick = {()=>this.insertionSortChoose()}>Insertion Sort</button>\n                    <button className = \"start\" onClick={() => this.start()}> Sort </button>\n                    <button className = \"abort\" onClick={()=>this.abort()}>Abort</button>\n                </div> \n            <div className=\"graph\">\n            {array.map((value,idx)=>(\n                 <div className = \"array-bars\"\n                 key={idx}\n                    style={{height: `${value}px`,width:width,marginLeft:margin, marginRight:margin, color:color}}>\n                  {value}      \n                </div>\n            ))}\n            </div>\n            <hr className=\"first-line\" /> \n            <div className = \"info\">\n            <div id = \"Algo-name\" className = \"Algo-name\">Select Algorithm</div>\n            <div id = \"text\" className = \"text\" > I wanted to learn React as well as revise classic sorting algorithms for my interview prep. This app turned out to be the great way to achieve both objectives at once. It is a great tool to visualize the step-by-step process of performing sorting algorithms on unsorted list of values. You can generate new array and then perform any of sorting algorithms on it. </div> \n           \n            <div id = \"complexity\" className = \"complexity\" >Time Complexity</div>\n            <div id = \"time\" className = \"time\" >Worst-case time complexity:      </div>     \n            <div>Average time complexity:\t     </div>     \n            <div>Best-case time complexity:\t      </div>\n            </div>\n            </div>\n        );\n    }\n\n}\n\nexport default SortingWiz;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SortingWiz from './SortingWiz.jsx';\nimport './barsStyle.css';\n\n \nfunction App() {\n  return (\n      <SortingWiz className = \"Visualizer\"></SortingWiz>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}