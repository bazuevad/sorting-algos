{"version":3,"sources":["logo.svg","Algorithms.js","SortingWiz.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","mergeSortAlgo","array","animations","length","auxArray","slice","helperMergeSort","start","end","mid","Math","floor","i","j","l","push","merge","SortingWiz","props","state","this","newArray","temp","bubbleSortAlgo","console","log","arrayBars","document","getElementsByClassName","barOne","barTwo","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","barOneHeight","barTwoHeight","height","barOneindx","newHeight","randomNum","random","setState","className","onClick","mergeSort","bubbleSort","map","value","idx","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0886d044.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport SortingWiz from './SortingWiz.jsx';\n\nexport function mergeSortAlgo(array){\n    const animations = [];\n    if(array.length<=1){\n        return array;\n    }\n    const auxArray = array.slice();\n    helperMergeSort(array,0,array.length-1,auxArray,animations);\n    \n    return animations;\n}\n\nfunction helperMergeSort(array, start, end, auxArray,animations){\n    if(start===end){\n        return;\n    }\n    const mid = Math.floor((start+end)/2);\n    helperMergeSort(auxArray,start,mid,array,animations);\n    helperMergeSort(auxArray,mid+1,end, array,animations);\n    merge(array,start,mid,end,auxArray,animations);\n}\n\nfunction merge(array,start,mid,end,auxArray,animations){\n    let i = start;\n    let j = mid+1;\n    let k = end;\n    let l = start;\n    while(i<=mid&&j<=end){\n        animations.push([i,j]);\n        animations.push([i,j]);\n        if(auxArray[i]<auxArray[j]){\n            animations.push([l,auxArray[i]]);\n            array[l] = auxArray[i];\n            l++;\n            i++;\n        }\n        else{\n            animations.push([l,auxArray[j]]);\n            array[l] = auxArray[j];\n            l++;\n            j++;\n        }\n    }\n    while(i<=mid){\n        animations.push([i,i]);\n        animations.push([i,i]);\n        animations.push([l,auxArray[i]]);\n        array[l]=auxArray[i];\n        l++;\n        i++;\n    }\n    while(j<=end){\n        animations.push([j,j]);\n        animations.push([j,j]);\n        animations.push([l,auxArray[j]]);\n        array[l]=auxArray[j];\n        l++;\n        j++;\n    }\n}\n\nexport function bubbleSortAlgo(array){\n    const animations = [];\n    for(let i = 0; i < array.length-1;i++){\n        for(let j = 0; j<array.length-1-i;j++){\n            animations.push([j,j+1]);\n            if(array[j]>array[j+1]){\n                let temp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = temp;\n                animations.push([j,array[j]]);\n                animations.push([j+1,array[j+1]]);\n            }\n            else{\n                animations.push([j,array[j]]);\n                animations.push([j+1,array[j+1]]);\n            }\n        }\n    }\n    return animations;\n}","import React from 'react';\nimport './barsStyle.css';\nimport {mergeSortAlgo} from './Algorithms.js';\nimport {bubbleSortAlgo} from './Algorithms.js';\n\nclass SortingWiz extends React.Component{\n    //creating constructor\n    constructor(props){\n        super(props);\n        //initializing local state\n        this.state = {array:[] };\n\n    }\n\n    componentDidMount(){\n        this.newArray();\n    }\n    bubbleSort(array){\n        const animations = bubbleSortAlgo(this.state.array);\n        //console.log(animations);\n        for(let i = 0; i<animations.length;i++){\n            console.log(animations[i]);\n            const arrayBars = document.getElementsByClassName('array-bars');\n            \n            if(i%3===0){\n                const [barOne,barTwo] = animations[i];\n                const barOneStyle = arrayBars[barOne].style;\n                const barTwoStyle = arrayBars[barTwo].style;\n                setTimeout(()=>{\n                    barOneStyle.backgroundColor = '#ff8c00';\n                    barTwoStyle.backgroundColor = '#ff8c00';\n                },i*1);\n            }\n            else if(i%3===1){\n                const[barOne, barOneHeight] = animations[i];\n                const[barTwo, barTwoHeight] = animations[i+1];\n                const barOneStyle = arrayBars[barOne].style;\n                const barTwoStyle = arrayBars[barTwo].style;\n                setTimeout(()=>{\n                    barOneStyle.height = `${barOneHeight}px`;\n                    barOneStyle.backgroundColor = '#b34cf4';\n                    barTwoStyle.height = `${barTwoHeight}px`;\n                    barTwoStyle.backgroundColor = '#b34cf4';\n                },i*1);\n            }\n        }\n    }\n    mergeSort(array){\n        const animations = mergeSortAlgo(this.state.array);\n        for(let i = 0; i <animations.length;i++){\n            const arrayBars = document.getElementsByClassName('array-bars');\n            //considering animations that happen before the values were \"swaped\"\n            if(i%3!==2){\n                const [barOne, barTwo] = animations[i];\n                //if annimation is the one after the values were swapped \n                const barOneStyle = arrayBars[barOne].style;\n                //console.log(arrayBars[barTwo]);\n                const barTwoStyle = arrayBars[barTwo].style;\n                \n                if(i%3===0){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = '#ff8c00';\n                        barTwoStyle.backgroundColor = '#ff8c00';\n                      }, i * 1);\n                }\n                else{\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = '#b34cf4';\n                        barTwoStyle.backgroundColor = '#b34cf4';\n                      }, i * 1); \n                }\n            }\n            else{\n                setTimeout(() => {\n                    const [barOneindx, newHeight] = animations[i];\n                    //const barOneStyle = arrayBars[barOneIdx].style;\n                    const barOneStyle = arrayBars[barOneindx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                    //barOneStyle.height = `${newHeight}px`;\n                  }, i * 1);\n            }\n        }\n    }\n    newArray(){\n        const array = [];\n        for(let i = 0; i<100;i++){\n            var randomNum = Math.floor((Math.random()*((500-10)+1))+10);\n            array.push(randomNum);\n        }\n        this.setState({array});\n    }\n    render(){\n        const{array} = this.state;\n        return (\n            \n            <div className=\"graph\">\n                <div className = \"menu\">\n                    <button onClick={() => this.newArray()}> Generate New Array </button>\n                    <button className=\"mergeSort\" onClick={() => this.mergeSort()}> Merge Sort</button>\n                    <button className = \"bubbleSort\" onClick = {()=>this.bubbleSort()}>Bubble Sort</button>\n                </div>\n            {array.map((value,idx)=>(\n                 <div className = \"array-bars\"\n                    style={{height: `${value}px`}}>\n                </div>\n            ))}\n            \n            </div>\n        );\n    }\n\n}\n\nexport default SortingWiz;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SortingWiz from './SortingWiz.jsx';\nimport './barsStyle.css';\n\n \nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingWiz></SortingWiz>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}